// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FileUploadTest.Model;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace FileUploadTest.Data
{
    public partial class FirstDBContext
    {
        private IFirstDBContextProcedures _procedures;

        public virtual IFirstDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new FirstDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IFirstDBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<USP_Image_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_Image_InsertResult>().HasNoKey().ToView(null);
        }
    }

    public partial class FirstDBContextProcedures : IFirstDBContextProcedures
    {
        private readonly FirstDBContext _context;

        public FirstDBContextProcedures(FirstDBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<USP_Image_GetResult>> USP_Image_GetAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_Image_GetResult>("EXEC @returnValue = [dbo].[USP_Image_Get]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_Image_InsertResult>> USP_Image_InsertAsync(string ImagePath, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ImagePath",
                    Size = -1,
                    Value = ImagePath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_Image_InsertResult>("EXEC @returnValue = [dbo].[USP_Image_Insert] @ImagePath", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
